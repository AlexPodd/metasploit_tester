package ciinterface

import (
	"os"
	"strings"

	"github.com/charmbracelet/bubbles/filepicker"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

var (
	titleStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#FFFDF5")).
			Background(lipgloss.Color("#25A065")).
			Padding(0, 1)

	statusMessageStyle = lipgloss.NewStyle().
				Foreground(lipgloss.AdaptiveColor{Light: "#04B575", Dark: "#04B575"}).
				Render
)

type AddExploitPage struct {
	stage        int
	filepicker   filepicker.Model
	selectedFile string
	savepicker   filepicker.Model
	selectedPath string

	err      error
	quitting bool
	app      *App
}

func (m *AddExploitPage) Init() tea.Cmd {
	return m.filepicker.Init()
}

func (m *AddExploitPage) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "q":
			m.quitting = true
			return m, tea.Quit
		case "esc":
			if m.stage == 1 {
				m.stage = 0
			} else {
				return m.app.homePage, nil
			}
		}
	}

	var cmd tea.Cmd
	switch m.stage {
	case 0:
		m.filepicker, cmd = m.filepicker.Update(msg)
		if didSelect, path := m.filepicker.DidSelectFile(msg); didSelect {
			m.selectedFile = path
			m.stage = 1
			home, _ := os.UserHomeDir()
			msfPath := home + "/.msf4/modules/exploits"
			m.savepicker.CurrentDirectory = msfPath
		}
	case 1:
		m.savepicker, cmd = m.savepicker.Update(msg)
		if didSelect, path := m.savepicker.DidSelectFile(msg); didSelect {
			m.selectedPath = path
			err := m.app.AddNewExploit(m.selectedFile, m.selectedPath)
			if err != nil {
				m.err = err
			} else {
				return m.app.homePage, nil
			}
		}
	}

	return m, cmd
}

func (m *AddExploitPage) View() string {
	var sb strings.Builder

	title := " ДОБАВИТЬ ЭКСПЛОИТ "
	sb.WriteString(titleStyle.Render(title) + "\n\n")

	if m.stage == 0 {
		sb.WriteString("Выберите Ruby-файл для добавления:\n\n")
		if m.selectedFile != "" {
			sb.WriteString("Выбранный файл: " + statusMessageStyle(m.selectedFile) + "\n\n")
		}
		sb.WriteString(m.filepicker.View())
	} else if m.stage == 1 {
		sb.WriteString("Выберите путь сохранения относительно .msf4:\n\n")
		if m.selectedPath != "" {
			sb.WriteString("Выбранный путь: " + statusMessageStyle(m.selectedPath) + "\n\n")
		}
		sb.WriteString(m.savepicker.View())
	}

	if m.err != nil {
		sb.WriteString("\n" + statusMessageStyle("Ошибка: "+m.err.Error()) + "\n")
	}

	sb.WriteString(helpStyleConfig.Render("\n ↑/↓ - навигация esc - назад • q - выход"))
	return appStyle.Render(sb.String())
}
func newAddExploit(app *App) *AddExploitPage {

	fp := filepicker.New()
	fp.AllowedTypes = []string{".rb"}
	fp.AutoHeight = false
	fp.SetHeight(15)
	home, _ := os.UserHomeDir()
	fp.CurrentDirectory = home

	sp := filepicker.New()
	sp.DirAllowed = true
	sp.AutoHeight = false
	sp.SetHeight(15)

	return &AddExploitPage{
		filepicker: fp,
		savepicker: sp,
		app:        app,
	}
}
